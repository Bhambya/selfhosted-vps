#!/bin/bash

SCHEDULE="0 0 * * *"
RUN_AS_USER="root"
SOURCE_CRON_DIR="$(pwd)/crons"

# This will be the single file that manages all scripts from that directory.
CRON_FILE="/etc/cron.d/selfhosted"

echo "--- Cron Installer ---"

# 1. Check for root privileges
if [ "$(id -u)" -ne 0 ]; then
  echo "Error: This script must be run with sudo or as root." >&2
  exit 1
fi

# 2. Check if source directory exists
if [ ! -d "$SOURCE_CRON_DIR" ]; then
  echo "Error: Source directory not found at $SOURCE_CRON_DIR" >&2
  echo "Please run this script from the directory that contains the 'crons' folder." >&2
  exit 1
fi

echo "Installing to cron file: $CRON_FILE"
echo "Using schedule: $SCHEDULE"

# 3. Create/overwrite the cron file with a header
# Using > truncates the file, effectively starting fresh each time.
{
  echo "# This file was auto-generated by install_crons.sh"
  echo "# It runs all executable scripts found in $SOURCE_CRON_DIR"
  echo "#"
  echo "# DO NOT EDIT THIS FILE MANUALLY - Your changes will be overwritten."
  echo "# Edit the schedule in install_crons.sh and re-run it instead."
  echo "#"
  echo "SHELL=/bin/bash"
  echo ""
  echo "0 * * * * $RUN_AS_USER $SOURCE_CRON_DIR/crowsec-hub-upgrade.sh || curl -X POST -F \"body=Crowdsec hub upgrade failed!\" http://127.0.0.1:8000/notify/apprise"
  echo "3 2 * * * $RUN_AS_USER $SOURCE_CRON_DIR/vaultwarden-backup.sh || curl -X POST -F \"body=Vaultwarden DB backup failed!\" http://127.0.0.1:8000/notify/apprise"
  echo "5 2 * * * $RUN_AS_USER $SOURCE_CRON_DIR/paperless-backup.sh || curl -X POST -F \"body=Paperless-ngx DB backup failed!\" http://127.0.0.1:8000/notify/apprise"
  echo "6 2 * * * $RUN_AS_USER $SOURCE_CRON_DIR/authelia-backup.sh || curl -X POST -F \"body=Authelia DB backup failed!\" http://127.0.0.1:8000/notify/apprise"
  echo "7 2 * * * $RUN_AS_USER $SOURCE_CRON_DIR/lldap-backup.sh || curl -X POST -F \"body=lldap DB backup failed!\" http://127.0.0.1:8000/notify/apprise"
} > "$CRON_FILE"

if [ $? -ne 0 ]; then
    echo "Error: Could not write to $CRON_FILE. Aborting." >&2
    exit 1
fi

# 5. Set correct permissions for the cron file
# This is critical. Cron daemons ignore files with insecure permissions.
# Must be owned by root and not writable by group or other.
chmod 644 "$CRON_FILE"
chown root:root "$CRON_FILE"

echo "-----------------------------"
echo "Success! Added $SCRIPT_COUNT jobs to $CRON_FILE"

echo "Done."